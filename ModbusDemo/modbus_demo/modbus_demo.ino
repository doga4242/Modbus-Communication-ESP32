//----------------------------------------------
//
//         Sketch Generated by Visuino
//               www.visuino.com
//           Version 8.0.0.112
//
//----------------------------------------------

#define VISUINO_ANY_ESP32
#define VISUINO_ESP32
#define __32BIT_GRAPHICS_COORDINATES__

#include <OpenWire.h>
#include <Mitov.h>
#include <Arduino.h>
#include <Mitov_ESP32.h>
#include <Mitov_StandardBreakSerial.h>
#include <ModbusRtu.h>
#include <HardwareSerial.h>

HardwareSerial MySerial(2); // define a Serial for UART1
const int MySerialRX = 16;
const int MySerialTX = 17;
Modbus m(2, MySerial, 4);
#include <Mitov_CustomCode.h>
#include <Mitov_Display_Nextion.h>
#include <Mitov_Timing.h>


// Shared Component Member Variables

namespace ComponentVariables
{
class
{
public:
  bool Value1 : 1;
  bool Value2 : 1;
  bool Value3 : 1;
  bool Value4 : 1;
  bool Value5 : 1;
  bool Value6 : 1;
  bool Value7 : 1;
  bool Value8 : 1;
  bool Value9 : 1;
  bool Value10 : 1;
  bool Value11 : 1;
  bool Value12 : 1;
  bool Value13 : 1;
  bool Value14 : 1;
  bool Value15 : 1;
  bool Value16 : 1;
  bool Value17 : 1;
  bool Value18 : 1;
  bool Value19 : 1;
  bool Value20 : 1;
  bool Value21 : 1;
  bool Value22 : 1;
  bool Value23 : 1;
  bool Value24 : 1;
  bool Value25 : 1;

} BitFields;

class Variable1
{
public:
  inline static bool GetValue() { return BitFields.Value1; }
  inline static void SetValue( bool AValue ) { BitFields.Value1 = AValue; }

};

class Variable2
{
public:
  inline static bool GetValue() { return BitFields.Value2; }
  inline static void SetValue( bool AValue ) { BitFields.Value2 = AValue; }

};

class Variable3
{
public:
  inline static bool GetValue() { return BitFields.Value3; }
  inline static void SetValue( bool AValue ) { BitFields.Value3 = AValue; }

};

class Variable4
{
public:
  inline static bool GetValue() { return BitFields.Value4; }
  inline static void SetValue( bool AValue ) { BitFields.Value4 = AValue; }

};

class Variable5
{
public:
  inline static bool GetValue() { return BitFields.Value5; }
  inline static void SetValue( bool AValue ) { BitFields.Value5 = AValue; }

};

class Variable6
{
public:
  inline static bool GetValue() { return BitFields.Value6; }
  inline static void SetValue( bool AValue ) { BitFields.Value6 = AValue; }

};

class Variable7
{
public:
  inline static bool GetValue() { return BitFields.Value7; }
  inline static void SetValue( bool AValue ) { BitFields.Value7 = AValue; }

};

class Variable8
{
public:
  inline static bool GetValue() { return BitFields.Value8; }
  inline static void SetValue( bool AValue ) { BitFields.Value8 = AValue; }

};

class Variable9
{
public:
  inline static bool GetValue() { return BitFields.Value9; }
  inline static void SetValue( bool AValue ) { BitFields.Value9 = AValue; }

};

class Variable10
{
public:
  inline static bool GetValue() { return BitFields.Value10; }
  inline static void SetValue( bool AValue ) { BitFields.Value10 = AValue; }

};

class Variable11
{
public:
  inline static bool GetValue() { return BitFields.Value11; }
  inline static void SetValue( bool AValue ) { BitFields.Value11 = AValue; }

};

class Variable12
{
public:
  inline static bool GetValue() { return BitFields.Value12; }
  inline static void SetValue( bool AValue ) { BitFields.Value12 = AValue; }

};

class Variable13
{
public:
  inline static bool GetValue() { return BitFields.Value13; }
  inline static void SetValue( bool AValue ) { BitFields.Value13 = AValue; }

};

class Variable14
{
public:
  inline static bool GetValue() { return BitFields.Value14; }
  inline static void SetValue( bool AValue ) { BitFields.Value14 = AValue; }

};

class Variable15
{
public:
  inline static bool GetValue() { return BitFields.Value15; }
  inline static void SetValue( bool AValue ) { BitFields.Value15 = AValue; }

};

class Variable16
{
public:
  inline static bool GetValue() { return BitFields.Value16; }
  inline static void SetValue( bool AValue ) { BitFields.Value16 = AValue; }

};

class Variable17
{
public:
  inline static bool GetValue() { return BitFields.Value17; }
  inline static void SetValue( bool AValue ) { BitFields.Value17 = AValue; }

};

class Variable18
{
public:
  inline static bool GetValue() { return BitFields.Value18; }
  inline static void SetValue( bool AValue ) { BitFields.Value18 = AValue; }

};

class Variable19
{
public:
  inline static bool GetValue() { return BitFields.Value19; }
  inline static void SetValue( bool AValue ) { BitFields.Value19 = AValue; }

};

class Variable20
{
public:
  inline static bool GetValue() { return BitFields.Value20; }
  inline static void SetValue( bool AValue ) { BitFields.Value20 = AValue; }

};

class Variable21
{
public:
  inline static bool GetValue() { return BitFields.Value21; }
  inline static void SetValue( bool AValue ) { BitFields.Value21 = AValue; }

};

class Variable22
{
public:
  inline static bool GetValue() { return BitFields.Value22; }
  inline static void SetValue( bool AValue ) { BitFields.Value22 = AValue; }

};

class Variable23
{
public:
  inline static bool GetValue() { return BitFields.Value23; }
  inline static void SetValue( bool AValue ) { BitFields.Value23 = AValue; }

};

class Variable24
{
public:
  inline static bool GetValue() { return BitFields.Value24; }
  inline static void SetValue( bool AValue ) { BitFields.Value24 = AValue; }

};

class Variable25
{
public:
  inline static bool GetValue() { return BitFields.Value25; }
  inline static void SetValue( bool AValue ) { BitFields.Value25 = AValue; }

};

} // ComponentVariables

// Arduino Constant Declarations

namespace VisuinoConstants
{
class TextValue2
{
public:
    inline static constexpr const char *GetValue() { return ""; }
};

class TextValue3
{
public:
    inline static constexpr const char *GetValue() { return "t1"; }
};

class TextValue4
{
public:
    inline static constexpr const char *GetValue() { return "t2"; }
};

class TextValue0
{
public:
    inline static constexpr const char *GetValue() { return "t0"; }
};

class TextValue1
{
public:
    inline static constexpr const char *GetValue() { return "txt"; }
};

} // VisuinoConstants

// Pin Call Declarations

namespace PinCalls
{
class PinCallerReceive0
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive1
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive2
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive3
{
public:
  void Notify( void *_Data );

};
} // PinCalls

// Call Chains

namespace CallChains
{
class GetPeriod1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call( int32_t AIndex, unsigned long & APeriod ) {}

};
class Render1
{
public:
  inline static constexpr uint32_t Count() { return 6; }
  static void Call();

};
class SendRequest1
{
public:
  inline static constexpr uint32_t Count() { return 6; }
  static void Call();

};
class ActivatePageNo1
{
public:
  inline static constexpr uint32_t Count() { return 6; }
  static void Call( uint8_t APageNo );

};
class ResetEvent1
{
public:
  inline static constexpr uint32_t Count() { return 6; }
  static void Call();

};
class TryProcessEvent1
{
public:
  inline static constexpr uint32_t Count() { return 6; }
  static void Call( uint8_t * ABuffer, bool & AProcessed );

};
class ResetEvent2
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call();

};
class TryProcessEvent2
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call( uint8_t * ABuffer, bool & AProcessed );

};
class ResetEvent3
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call();

};
class TryProcessEvent3
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call( uint8_t * ABuffer, bool & AProcessed );

};
class ResetEvent4
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call();

};
class TryProcessEvent4
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call( uint8_t * ABuffer, bool & AProcessed );

};
class ResetEvent5
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call() {}

};
class TryProcessEvent5
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call( uint8_t * ABuffer, bool & AProcessed ) {}

};
class ResetEvent6
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call() {}

};
class TryProcessEvent6
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call( uint8_t * ABuffer, bool & AProcessed ) {}

};
class ResetEvent7
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call() {}

};
class TryProcessEvent7
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  inline static void Call( uint8_t * ABuffer, bool & AProcessed ) {}

};
} // CallChains

// Arduino Board Declarations

namespace BoardDeclarations
{
namespace Types
{
typedef Mitov::BreakSerialPort<
  HardwareSerial, // 0_SERIAL_TYPE
  Serial, // 1_C_OBJECT
  Mitov::ConstantProperty<4, uint32_t, 0 >, // AfterSendingDelay = 0 (Default)
  Mitov::ConstantProperty<7, uint32_t, 8 >, // DataBits = 8 (Default)
  Mitov::EmbeddedCallChain<CallChains::GetPeriod1 >, // Elements_GetPeriod
  Mitov::ConstantProperty<2, bool, true >, // Enabled = True (Default)
  Mitov::ConstantProperty<17, uint32_t, 0 >, // FElementIndex = 0
  Mitov::ConstantProperty<21, uint32_t, 0 >, // FEndTime = 0
  Mitov::ConstantProperty<23, bool, false >, // FInBreak = False
  Mitov::ConstantProperty<19, bool, false >, // FSending = False
  Mitov::GenericPin_EmbeddedPinImplementation<5, ::PinCalls::PinCallerReceive0 >, // OutputPin
  Mitov::ConstantProperty<9, Mitov::TArduinoStandardSerialParity, Mitov::spNone >, // Parity = spNone (Default)
  Mitov::NestedProperty<16, Mitov::TArduinoSerialBreak<
    Mitov::ConstantProperty<11, bool, false >, // Enabled = False (Default)
    Mitov::NestedProperty<15, Mitov::TAurduinoEnableValue<
      Mitov::ConstantProperty<13, bool, false >, // Enabled = False (Default)
      Mitov::ConstantProperty<14, uint32_t, 100 > // Value = 100 (Default)
       > > // Period
     > >, // SendBreak
  Mitov::DigitalPin_NoImplementation<3 >, // SendingOutputPin
  Mitov::ConstantProperty<6, uint32_t, 9600 >, // Speed = 9600 (Default)
  Mitov::ConstantProperty<8, uint32_t, 1 >, // StopBits = 1 (Default)
  Mitov::ConstantProperty<87, uint32_t, 1 > // TXPin
   > SerialPort0;
} // Types

namespace Instances
{
Types::SerialPort0 SerialPort0;
} // Instances

} // BoardDeclarations

// Custom Code Declarations

namespace CustomCode
{
  class TCustomCode31
  {
uint16_t array[16];

  public: // Outputs
    Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive1, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer1;

    Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive2, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer2;

    Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive3, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer3;

    Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer4;

    Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer5;

    Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > Integer6;

  public:
    void SystemStart();

  public:
    void SystemLoopBegin();

  };
} // CustomCode

// Declarations

namespace Declarations
{
namespace Types
{
typedef CustomCode::TCustomCode31 CustomCode3; // TArduinoCustomCode
} // Types

namespace Instances
{
Types::CustomCode3 CustomCode3; // TArduinoCustomCode
} // Instances

Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive1, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement1 = Declarations::Instances::CustomCode3.Integer1;

Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive2, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement2 = Declarations::Instances::CustomCode3.Integer2;

Mitov::CustomOutput<
  Mitov::TypedPin_EmbeddedPinImplementation<2, ::PinCalls::PinCallerReceive3, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement3 = Declarations::Instances::CustomCode3.Integer3;

Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement4 = Declarations::Instances::CustomCode3.Integer4;

Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement5 = Declarations::Instances::CustomCode3.Integer5;

Mitov::CustomOutput<
  Mitov::TypedPin_NoImplementation<2, int32_t >, // OutputPin
  int32_t // TYPE
   > &TArduinoCustomCodeOutputIntegerElement6 = Declarations::Instances::CustomCode3.Integer6;

namespace Types
{
typedef Mitov::DisplayNextion<
  BoardDeclarations::Types::SerialPort0, // 0_SERIAL_TYPE_PIN
  BoardDeclarations::Instances::SerialPort0, // 1_SERIAL_NAME_PIN
  Mitov::EmbeddedCallChain<CallChains::ActivatePageNo1 >, // Elements_ActivatePageNo
  Mitov::EmbeddedCallChain<CallChains::Render1 >, // Elements_Render
  Mitov::EmbeddedCallChain<CallChains::ResetEvent1 >, // Elements_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::SendRequest1 >, // Elements_SendRequest
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent1 >, // Elements_TryProcessEvent
  Mitov::TypedVariable<6, bool, ::ComponentVariables::Variable1 >, // FStarted
  Mitov::ConstantProperty<5, bool, true > // ResetDisplay = True (Default)
   > DisplayNextion1; // TArduinoDisplayNextion
} // Types

namespace Instances
{
Types::DisplayNextion1 DisplayNextion1; // TArduinoDisplayNextion
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, 2 >, // ElementID = 2
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // ElementName = "t0" (Default)
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable4 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable5 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable2 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent2 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent2 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable3 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, 0 > // PageIndex = 0
   > TArduinoDisplayNextionElementText1;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText1 TArduinoDisplayNextionElementText1;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementModifierPropertySetterString<
  Declarations::Types::TArduinoDisplayNextionElementText1, // 0_TYPE_OWNER
  Declarations::Instances::TArduinoDisplayNextionElementText1, // 1_NAME_OWNER
  Mitov::ConstantPropertyString<2, ::VisuinoConstants::TextValue1 >, // PropertyName = "txt"
  Mitov::VariablePropertyString<4, ::VisuinoConstants::TextValue2 > // Value = "" (Default)
   > TArduinoDisplayNextionElementModifierPropertySetterString1;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementModifierPropertySetterString1 TArduinoDisplayNextionElementModifierPropertySetterString1;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, 3 >, // ElementID = 3
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue3 >, // ElementName = "t1"
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable8 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable9 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable6 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent3 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent3 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable7 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, 0 > // PageIndex = 0
   > TArduinoDisplayNextionElementText2;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText2 TArduinoDisplayNextionElementText2;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementModifierPropertySetterString<
  Declarations::Types::TArduinoDisplayNextionElementText2, // 0_TYPE_OWNER
  Declarations::Instances::TArduinoDisplayNextionElementText2, // 1_NAME_OWNER
  Mitov::ConstantPropertyString<2, ::VisuinoConstants::TextValue1 >, // PropertyName = "txt"
  Mitov::VariablePropertyString<4, ::VisuinoConstants::TextValue2 > // Value = "" (Default)
   > TArduinoDisplayNextionElementModifierPropertySetterString2;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementModifierPropertySetterString2 TArduinoDisplayNextionElementModifierPropertySetterString2;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, 4 >, // ElementID = 4
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue4 >, // ElementName = "t2"
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable12 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable13 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable10 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent4 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent4 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable11 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, 0 > // PageIndex = 0
   > TArduinoDisplayNextionElementText3;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText3 TArduinoDisplayNextionElementText3;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementModifierPropertySetterString<
  Declarations::Types::TArduinoDisplayNextionElementText3, // 0_TYPE_OWNER
  Declarations::Instances::TArduinoDisplayNextionElementText3, // 1_NAME_OWNER
  Mitov::ConstantPropertyString<2, ::VisuinoConstants::TextValue1 >, // PropertyName = "txt"
  Mitov::VariablePropertyString<4, ::VisuinoConstants::TextValue2 > // Value = "" (Default)
   > TArduinoDisplayNextionElementModifierPropertySetterString3;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementModifierPropertySetterString3 TArduinoDisplayNextionElementModifierPropertySetterString3;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, -1 >, // ElementID = -1 (Default)
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // ElementName = "t0" (Default)
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable16 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable17 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable14 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent5 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent5 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable15 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, -1 > // PageIndex = -1 (Default)
   > TArduinoDisplayNextionElementText4;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText4 TArduinoDisplayNextionElementText4;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, -1 >, // ElementID = -1 (Default)
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // ElementName = "t0" (Default)
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable20 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable21 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable18 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent6 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent6 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable19 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, -1 > // PageIndex = -1 (Default)
   > TArduinoDisplayNextionElementText5;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText5 TArduinoDisplayNextionElementText5;
} // Instances

namespace Types
{
typedef Mitov::DisplayNextionElementText<
  Declarations::Types::DisplayNextion1, // 0_TYPE_OWNER
  Declarations::Instances::DisplayNextion1, // 1_NAME_OWNER
  Mitov::VariableProperty<5, int32_t, -1 >, // ElementID = -1 (Default)
  Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // ElementName = "t0" (Default)
  Mitov::TypedVariable<11, bool, ::ComponentVariables::Variable24 >, // FHasData
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable25 >, // FUpdatedOnce
  Mitov::TypedVariable<7, bool, ::ComponentVariables::Variable22 >, // Identified
  Mitov::EmbeddedCallChain<CallChains::ResetEvent7 >, // Modifiers_ResetEvent
  Mitov::EmbeddedCallChain<CallChains::TryProcessEvent7 >, // Modifiers_TryProcessEvent
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable23 >, // PageIdentified
  Mitov::VariableProperty<4, int32_t, -1 > // PageIndex = -1 (Default)
   > TArduinoDisplayNextionElementText6;
} // Types

namespace Instances
{
Types::TArduinoDisplayNextionElementText6 TArduinoDisplayNextionElementText6;
} // Instances

} // Declarations

// Custom Code Implementations

namespace CustomCode
{
void TCustomCode31::SystemStart()
{
  // Set the communication baud rate to 9600
  Serial.begin(115200);
    MySerial.begin(115200, SERIAL_8N1, MySerialRX, MySerialTX);
  // Initialize the Modbus object
  m.start();

  // Set the communication timeout to 1000 milliseconds
  m.setTimeOut(1000);
}

void TCustomCode31::SystemLoopBegin()
{
if(!m.getState()){
    m.poll(array,16);
Integer1.Send(array[0]);
Integer2.Send(array[1]);
Integer3.Send(array[2]);
Integer4.Send(array[3]);
Integer5.Send(array[4]);
Integer6.Send(array[5]);
  delay(1);
}else{
  Serial.println("Err");
}
}

} // CustomCode

// Type Converters

namespace TypeConverters
{
Mitov::TypedConvert<int32_t,Mitov::String> Converter0;
Mitov::TypedConvert<int32_t,Mitov::String> Converter1;
Mitov::TypedConvert<int32_t,Mitov::String> Converter2;
} // TypeConverters

// Call Chains

namespace CallChains
{
void Render1::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementText1.Render();
  Declarations::Instances::TArduinoDisplayNextionElementText2.Render();
  Declarations::Instances::TArduinoDisplayNextionElementText3.Render();
  Declarations::Instances::TArduinoDisplayNextionElementText4.Render();
  Declarations::Instances::TArduinoDisplayNextionElementText5.Render();
  Declarations::Instances::TArduinoDisplayNextionElementText6.Render();
}

void SendRequest1::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementText1.SendRequest();
  Declarations::Instances::TArduinoDisplayNextionElementText2.SendRequest();
  Declarations::Instances::TArduinoDisplayNextionElementText3.SendRequest();
  Declarations::Instances::TArduinoDisplayNextionElementText4.SendRequest();
  Declarations::Instances::TArduinoDisplayNextionElementText5.SendRequest();
  Declarations::Instances::TArduinoDisplayNextionElementText6.SendRequest();
}

void ActivatePageNo1::Call( uint8_t APageNo )
{
  Declarations::Instances::TArduinoDisplayNextionElementText1.ActivatePageNo( APageNo );
  Declarations::Instances::TArduinoDisplayNextionElementText2.ActivatePageNo( APageNo );
  Declarations::Instances::TArduinoDisplayNextionElementText3.ActivatePageNo( APageNo );
  Declarations::Instances::TArduinoDisplayNextionElementText4.ActivatePageNo( APageNo );
  Declarations::Instances::TArduinoDisplayNextionElementText5.ActivatePageNo( APageNo );
  Declarations::Instances::TArduinoDisplayNextionElementText6.ActivatePageNo( APageNo );
}

void ResetEvent1::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementText1.ResetEvent();
  Declarations::Instances::TArduinoDisplayNextionElementText2.ResetEvent();
  Declarations::Instances::TArduinoDisplayNextionElementText3.ResetEvent();
  Declarations::Instances::TArduinoDisplayNextionElementText4.ResetEvent();
  Declarations::Instances::TArduinoDisplayNextionElementText5.ResetEvent();
  Declarations::Instances::TArduinoDisplayNextionElementText6.ResetEvent();
}

void TryProcessEvent1::Call( uint8_t * ABuffer, bool & AProcessed )
{
  Declarations::Instances::TArduinoDisplayNextionElementText1.TryProcessEvent( ABuffer, AProcessed );
  Declarations::Instances::TArduinoDisplayNextionElementText2.TryProcessEvent( ABuffer, AProcessed );
  Declarations::Instances::TArduinoDisplayNextionElementText3.TryProcessEvent( ABuffer, AProcessed );
  Declarations::Instances::TArduinoDisplayNextionElementText4.TryProcessEvent( ABuffer, AProcessed );
  Declarations::Instances::TArduinoDisplayNextionElementText5.TryProcessEvent( ABuffer, AProcessed );
  Declarations::Instances::TArduinoDisplayNextionElementText6.TryProcessEvent( ABuffer, AProcessed );
}

void ResetEvent2::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString1.ResetEvent();
}

void TryProcessEvent2::Call( uint8_t * ABuffer, bool & AProcessed )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString1.TryProcessEvent( ABuffer, AProcessed );
}

void ResetEvent3::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString2.ResetEvent();
}

void TryProcessEvent3::Call( uint8_t * ABuffer, bool & AProcessed )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString2.TryProcessEvent( ABuffer, AProcessed );
}

void ResetEvent4::Call()
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString3.ResetEvent();
}

void TryProcessEvent4::Call( uint8_t * ABuffer, bool & AProcessed )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString3.TryProcessEvent( ABuffer, AProcessed );
}

} // CallChains

// Pin Call Declarations

namespace PinCalls
{
void PinCallerConverterReceive1( void *_Data );
void PinCallerConverterReceive2( void *_Data );
void PinCallerConverterReceive3( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive0::Notify( void *_Data )
{
  Declarations::Instances::DisplayNextion1._DirectPinReceive( _Data );
}

void PinCallerReceive1::Notify( void *_Data )
{
  TypeConverters::Converter0.Convert( _Data, PinCallerConverterReceive1 );
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString1.ClockInputPin_o_Receive( _Data );
}

void PinCallerConverterReceive1( void *_Data )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString1.Value().InputPin_o_Receive( _Data );
}
void PinCallerReceive2::Notify( void *_Data )
{
  TypeConverters::Converter1.Convert( _Data, PinCallerConverterReceive2 );
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString2.ClockInputPin_o_Receive( _Data );
}

void PinCallerConverterReceive2( void *_Data )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString2.Value().InputPin_o_Receive( _Data );
}
void PinCallerReceive3::Notify( void *_Data )
{
  TypeConverters::Converter2.Convert( _Data, PinCallerConverterReceive3 );
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString3.ClockInputPin_o_Receive( _Data );
}

void PinCallerConverterReceive3( void *_Data )
{
  Declarations::Instances::TArduinoDisplayNextionElementModifierPropertySetterString3.Value().InputPin_o_Receive( _Data );
}
} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::Instances::SerialPort0.SystemInit();
  Declarations::Instances::DisplayNextion1.SystemInit();
  Declarations::Instances::CustomCode3.SystemStart();
}

// The loop function is called in an endless loop
void loop()
{
  BoardDeclarations::Instances::SerialPort0.SystemLoopBeginOutput();
  Declarations::Instances::CustomCode3.SystemLoopBegin();
  Declarations::Instances::DisplayNextion1.SystemLoopBegin();
}
